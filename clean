#!/usr/bin/env python3

# clean
# Filter assembly FASTA based on Tapestry results

# Part of Tapestry
# https://github.com/johnomics/tapestry

# MIT License
# 
# Copyright (c) 2019 John Davey
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys, argparse, csv

from Bio import SeqIO
from Bio.Seq import Seq

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="clean: filter and order assembly from list of contigs")

    parser.add_argument('-a', '--assembly', help="filename of assembly in FASTA format", type=str, required=True)
    parser.add_argument('-c', '--csv', help="Tapestry CSV output", type=str, required=True)
    parser.add_argument('-o', '--output', help="filename of output contigs, default filtered_assembly.fasta", type=str, default="filtered_assembly.fasta")

    args = parser.parse_args()

    assembly = SeqIO.to_dict(SeqIO.parse(args.assembly, "fasta"))
    print(f"Loaded {len(assembly)} contigs from original assembly {args.assembly}", file=sys.stderr)

    contigs = []
    with open(args.csv, 'r') as csvfile:
        for row in csv.DictReader(csvfile):
            if row['Keep'] == 'yes':
                contigs.append(row['Contig'])
    print(f"Loaded list {len(contigs)} contigs to retain from {args.csv}", file=sys.stderr)

    with open(args.output, 'w') as output:
        contigs_written = 0
        for contig in contigs:
            SeqIO.write(assembly[contig], output, "fasta")
            contigs_written += 1
    print(f"Wrote {contigs_written} contigs to {args.output}", file=sys.stderr)

    print("Done", file=sys.stderr)
